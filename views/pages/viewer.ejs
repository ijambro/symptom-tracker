<!DOCTYPE html>
<html lang="en">

<head>
    <%- include("../partials/head"); %>
    <link href="/css/viewer.css" rel="stylesheet" type="text/css">
    <link href="/css/footer.css" rel="stylesheet" type="text/css">

    <link rel="stylesheet" href="https://uicdn.toast.com/chart/latest/toastui-chart.min.css" />
    <script src="https://uicdn.toast.com/chart/latest/toastui-chart.min.js"></script>
</head>

<body>

    <%- include("../partials/header", { selectedTab: "viewer" }); %>

    <main>
        <br>
        <!-- <p>Your tracked values:</p> -->
        <div id="symptoms-chart"></div>
        <br>
        <div id="foods-chart"></div>
        <br>
        <div id="meds-chart"></div>
        
        <p>Showing all your recorded events:</p>

        <pre id="allmetrics">[ Loading... ]</pre>

    </main>

    <%- include("../partials/footer"); %>

</body>

<script type="text/javascript">

const MAX_CHART_WIDTH = 900;
const CHART_WIDTH = (window.innerWidth > MAX_CHART_WIDTH) ? MAX_CHART_WIDTH : window.innerWidth;
const CHART_HEIGHT = 500;
console.log("Using chart dimensions: " + CHART_WIDTH + " x " + CHART_HEIGHT);

const BASELINE_TEMPERATURE = 95;
const FOOD_UNIT_SCALE = 50;

document.addEventListener("DOMContentLoaded", async function() {
    // From/To date and time pickers
    // let elems = document.querySelectorAll(".datepicker");
    // M.Datepicker.init(elems, { format: "yyyy-mm-dd" });

    // Load all metrics and display in the allMetrics div
    try {
        const response = await fetch("/metrics");
        if (response.ok) {
            console.log("response contains metrics json:");
            const allMetrics = await response.json();
            console.log(allMetrics);

            document.getElementById("allmetrics").innerText = JSON.stringify(allMetrics, null, 2); //await response.text();

            // Initialize the Toast-UI chart
            initSymptomsLineChart(allMetrics);
            initMedsLineChart(allMetrics);
            initLineScatterChart(allMetrics);
        }
    } catch (error) {
        console.log("Fetch error: ", error);
    }
});



function initSymptomsLineChart(allMetrics) {
    const el = document.getElementById("symptoms-chart");

    const data = {
        series: []
    };

    let painData = {
        name: 'Pain',
        data: []
    };
    let gasData = {
        name: 'Gas',
        data: []
    };
    let poopData = {
        name: 'Poop',
        data: []
    };
    let stressData = {
        name: 'Stress',
        data: []
    };
    let tempData = {
        name: 'Temperature',
        data: []
    };

    for (let i=0; i < allMetrics.length; i++) {
        let m = allMetrics[i];
        if (m.type === "pain") {
            painData.data.push([
                m.time,
                m.metrics.level
            ]);
        } else if (m.type === "gas") {
            gasData.data.push([
                m.time,
                m.metrics.level
            ]);
        } else if (m.type === "poop") {
            poopData.data.push([
                m.time,
                calculatePoopLevelFromMetrics(m.metrics)
            ]);
        } else if (m.type === "stress") {
            stressData.data.push([
                m.time,
                m.metrics.level
            ]);
        } else if (m.type === "temp") {
            tempData.data.push([
                m.time,
                m.metrics.level - BASELINE_TEMPERATURE
            ]);
        }
    }

    if (painData.data.length > 0) data.series.push(painData);
    if (gasData.data.length > 0) data.series.push(gasData);
    if (poopData.data.length > 0) data.series.push(poopData);
    if (stressData.data.length > 0) data.series.push(stressData);
    if (tempData.data.length > 0) data.series.push(tempData);

    console.log("Computed data from metrics:");
    console.log(data);

    const options = {
        chart: { title: "Symptoms:", width: CHART_WIDTH, height: CHART_HEIGHT },
        xAxis: { pointOnColumn: true, title: 'Time', date: { format: 'MM/dd hh:mm' }, },
        yAxis: { title: 'Level' },
        legend: { align: 'bottom' },
        series: { eventDetectType: 'point', zoomable: true }
    };

    const chart = toastui.Chart.lineChart({ el, data, options });
}

function initMedsLineChart(allMetrics) {
    const el = document.getElementById("meds-chart");

    const data = {
        series: []
    };

    let medData = {
        name: 'Meds',
        data: []
    };
    let vaxData = {
        name: 'Vaccines',
        data: []
    };
    let infusionData = {
        name: 'Infusions',
        data: []
    };

    data.series.push(medData);
    data.series.push(vaxData);
    data.series.push(infusionData);

    const options = {
        chart: { title: "Medicines (coming soon):", width: CHART_WIDTH, height: CHART_HEIGHT },
        xAxis: { pointOnColumn: true, title: 'Time', date: { format: 'MM/dd hh:mm' }, },
        yAxis: { title: 'Doses' },
        legend: { align: 'bottom' },
        series: { eventDetectType: 'point', zoomable: true }
    };

    const chart = toastui.Chart.lineChart({ el, data, options });
}

function initFoodsLineChart(allMetrics) {
    const el = document.getElementById("foods-chart");

    const data = {
        series: []
    };

    let foodData = {
        name: 'Food',
        data: []
    };
    let waterData = {
        name: 'Water',
        data: []
    };
    let alcoholData = {
        name: 'Alcohol',
        data: []
    };
    let caffeineData = {
        name: 'Caffeine',
        data: []
    };

    for (let i=0; i < allMetrics.length; i++) {
        let m = allMetrics[i];
        if (m.type === "food") {
            foodData.data.push([
                m.time,
                m.metrics.level / FOOD_UNIT_SCALE
            ]);
        } else if (m.type === "water") {
            waterData.data.push([
                m.time,
                m.metrics.level
            ]);
        } else if (m.type === "alcohol") {
            alcoholData.data.push([
                m.time,
                m.metrics.level
            ]);
        } else if (m.type === "caffeine") {
            caffeineData.data.push([
                m.time,
                m.metrics.level
            ]);
        }
    }

    data.series.push(foodData);
    data.series.push(waterData);
    data.series.push(alcoholData);
    data.series.push(caffeineData);

    const options = {
        chart: { title: "Food & Beverage:", width: CHART_WIDTH, height: CHART_HEIGHT },
        xAxis: { pointOnColumn: true, title: 'Time', date: { format: 'MM/dd hh:mm' }, },
        yAxis: { title: 'Amount' },
        legend: { align: 'bottom' },
        series: { eventDetectType: 'point', zoomable: true }
    };

    const chart = toastui.Chart.lineChart({ el, data, options });
}

function initLineScatterChart(allMetrics) {
    const el = document.getElementById("foods-chart");

    const data = {
        series: {
            line: [],
            scatter: []
        }
    };

    let painData = {
        name: 'Pain',
        data: []
    };
    let gasData = {
        name: 'Gas',
        data: []
    };
    let poopData = {
        name: 'Poop',
        data: []
    };
    let stressData = {
        name: 'Stress',
        data: []
    };
    let tempData = {
        name: 'Temperature',
        data: []
    };

    for (let i=0; i < allMetrics.length; i++) {
        let m = allMetrics[i];
        if (m.type === "pain") {
            painData.data.push([
                m.time,
                m.metrics.level
            ]);
        } else if (m.type === "gas") {
            gasData.data.push([
                m.time,
                m.metrics.level
            ]);
        } else if (m.type === "poop") {
            poopData.data.push([
                m.time,
                calculatePoopLevelFromMetrics(m.metrics)
            ]);
        } else if (m.type === "stress") {
            stressData.data.push([
                m.time,
                m.metrics.level
            ]);
        } else if (m.type === "temp") {
            tempData.data.push([
                m.time,
                m.metrics.level - BASELINE_TEMPERATURE
            ]);
        }
    }

    if (painData.data.length > 0) data.series.line.push(painData);
    if (gasData.data.length > 0) data.series.line.push(gasData);
    if (poopData.data.length > 0) data.series.line.push(poopData);
    if (stressData.data.length > 0) data.series.line.push(stressData);
    if (tempData.data.length > 0) data.series.line.push(tempData);

    let foodData = {
        name: 'Food',
        data: []
    };
    let waterData = {
        name: 'Water',
        data: []
    };
    let alcoholData = {
        name: 'Alcohol',
        data: []
    };
    let caffeineData = {
        name: 'Caffeine',
        data: []
    };

    for (let i=0; i < allMetrics.length; i++) {
        let m = allMetrics[i];
        if (m.type === "food") {
            foodData.data.push([
                m.time,
                m.metrics.level / FOOD_UNIT_SCALE
            ]);
        } else if (m.type === "water") {
            waterData.data.push([
                m.time,
                m.metrics.level
            ]);
        } else if (m.type === "alcohol") {
            alcoholData.data.push([
                m.time,
                m.metrics.level
            ]);
        } else if (m.type === "caffeine") {
            caffeineData.data.push([
                m.time,
                m.metrics.level
            ]);
        }
    }

    if (foodData.data.length > 0) data.series.scatter.push(foodData);
    if (waterData.data.length > 0) data.series.scatter.push(waterData);
    if (alcoholData.data.length > 0) data.series.scatter.push(alcoholData);
    if (caffeineData.data.length > 0) data.series.scatter.push(caffeineData);

    const options = {
        chart: { title: "Symptoms with Food & Beverage:", width: CHART_WIDTH, height: CHART_HEIGHT },
        xAxis: { pointOnColumn: true, title: 'Time', date: { format: 'MM/dd hh:mm' }, },
        yAxis: { title: 'Level/Amount' },
        legend: { align: 'bottom' },
        series: { eventDetectType: 'point', zoomable: true }
    };

    const chart = toastui.Chart.lineScatterChart({ el, data, options });
}

function calculatePoopLevelFromMetrics(metrics) {
    let level = 0;
    if (metrics.pooped === true) {
        level = metrics.consistency;

        if (metrics.urgent === true) level++;
        if (metrics.explosive === true) level++;
        if (metrics.blood === true) level++;
    }
    
    // Consider adding 1-3 points for duration/10 mins.
    // This would allow decoy poops to get a level > 0.

    return level;
}

//Examples

function initExampleColumnChart() {
    const el = document.getElementById("toast-chart");

    const data = {
        categories: ['Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        series: [
            {
            name: 'Budget',
            data: [5000, 3000, 5000, 7000, 6000, 4000, 1000],
            },
            {
            name: 'Income',
            data: [8000, 4000, 7000, 2000, 6000, 3000, 5000],
            },
        ]
    };
    const options = {
        chart: { width: 700, height: 400 },
        usageStatistics: false,
        zoomable: true
    };

    const chart = toastui.Chart.columnChart({ el, data, options });
}

</script>

</html>